name: Monitor & Alert

on:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
  repository_dispatch:
    types: [health-check]

env:
  NODE_VERSION: '18'

jobs:
  # Health check job
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run basic tests
      run: npm run test:unit
      
    - name: Check build status
      run: |
        npm run compile
        
        # Check if build artifacts exist
        if [ ! -f "out/extension.js" ]; then
          echo "❌ Build failed - extension.js not found"
          exit 1
        fi
        
        echo "✅ Build successful"
      
    - name: Check package integrity
      run: |
        # Validate package.json
        node -e "
          const pkg = require('./package.json');
          const required = ['name', 'version', 'publisher', 'engines', 'main'];
          const missing = required.filter(field => !pkg[field]);
          if (missing.length > 0) {
            console.error('❌ Missing required fields:', missing);
            process.exit(1);
          }
          console.log('✅ Package.json integrity check passed');
        "
      
    - name: Check dependency health
      run: |
        # Check for outdated dependencies
        OUTDATED=$(npm outdated --json 2>/dev/null | jq -r 'keys[]' | wc -l)
        echo "📦 Outdated dependencies: $OUTDATED"
        
        if [ "$OUTDATED" -gt 10 ]; then
          echo "⚠️ Warning: Many outdated dependencies detected"
        fi
        
        # Check for security vulnerabilities
        VULNERABILITIES=$(npm audit --audit-level=moderate --json 2>/dev/null | jq '.metadata.vulnerabilities.total' || echo "0")
        echo "🔒 Security vulnerabilities: $VULNERABILITIES"
        
        if [ "$VULNERABILITIES" -gt 0 ]; then
          echo "❌ Security vulnerabilities detected"
          exit 1
        fi
        
        echo "✅ Dependency health check passed"
      
    - name: Check test coverage
      run: |
        npm run test:coverage
        
        # Extract coverage percentage
        COVERAGE=$(npm run test:coverage 2>&1 | grep -o 'All files[^%]*%' | grep -o '[0-9]*\.[0-9]*%' | head -1 | sed 's/%//')
        
        if [ -z "$COVERAGE" ]; then
          echo "❌ Could not extract coverage percentage"
          exit 1
        fi
        
        echo "📊 Test coverage: ${COVERAGE}%"
        
        # Alert if coverage drops below 80%
        if (( $(echo "$COVERAGE < 80" | bc -l) )); then
          echo "⚠️ Warning: Test coverage below 80%"
        fi
        
        echo "✅ Test coverage check completed"

  # Performance monitoring
  performance-check:
    name: Performance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Measure build time
      run: |
        echo "🕒 Starting build time measurement..."
        START_TIME=$(date +%s)
        
        npm run compile
        
        END_TIME=$(date +%s)
        BUILD_TIME=$((END_TIME - START_TIME))
        
        echo "📊 Build time: ${BUILD_TIME} seconds"
        
        # Alert if build takes too long (>30 seconds)
        if [ "$BUILD_TIME" -gt 30 ]; then
          echo "⚠️ Warning: Build time exceeds 30 seconds"
        fi
        
        echo "✅ Build performance check completed"
      
    - name: Measure test execution time
      run: |
        echo "🕒 Starting test execution time measurement..."
        START_TIME=$(date +%s)
        
        npm run test:unit
        
        END_TIME=$(date +%s)
        TEST_TIME=$((END_TIME - START_TIME))
        
        echo "📊 Test execution time: ${TEST_TIME} seconds"
        
        # Alert if tests take too long (>60 seconds)
        if [ "$TEST_TIME" -gt 60 ]; then
          echo "⚠️ Warning: Test execution time exceeds 60 seconds"
        fi
        
        echo "✅ Test performance check completed"
      
    - name: Check bundle size
      run: |
        npm run compile
        node create-vsix.js
        
        SIZE=$(stat -c%s cursor-ai-workflow-automation-*.vsix)
        echo "📦 Extension bundle size: $SIZE bytes"
        
        # Alert if bundle is too large (>5MB)
        if [ "$SIZE" -gt 5242880 ]; then
          echo "⚠️ Warning: Extension bundle size exceeds 5MB"
        fi
        
        echo "✅ Bundle size check completed"

  # Alert job
  alert:
    name: Send Alerts
    runs-on: ubuntu-latest
    needs: [health-check, performance-check]
    if: always()
    
    steps:
    - name: Check job status
      run: |
        if [ "${{ needs.health-check.result }}" != "success" ]; then
          echo "❌ Health check failed"
          exit 1
        fi
        
        if [ "${{ needs.performance-check.result }}" != "success" ]; then
          echo "⚠️ Performance check had warnings"
        fi
        
        echo "✅ All checks passed"
      
    - name: Send success notification
      if: success()
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '✅ Health Check Passed',
            body: `## 🟢 System Health Check - PASSED
          
          📅 **Date**: ${new Date().toISOString()}
          🔗 **Commit**: ${{ github.sha }}
          
          ### ✅ Checks Completed:
          - **Health Check**: ✅ Passed
          - **Performance Check**: ✅ Passed
          - **Dependency Health**: ✅ Clean
          - **Test Coverage**: ✅ Above threshold
          - **Build Performance**: ✅ Within limits
          
          ### 📊 Metrics:
          - Build Time: Measured
          - Test Time: Measured
          - Bundle Size: Within limits
          - Dependencies: Up to date
          
          The extension is healthy and performing well! 🎉`
          });
      
    - name: Send failure notification
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '❌ Health Check Failed',
            body: `## 🔴 System Health Check - FAILED
          
          📅 **Date**: ${new Date().toISOString()}
          🔗 **Commit**: ${{ github.sha }}
          
          ### ❌ Issues Detected:
          - **Health Check**: ${{ needs.health-check.result }}
          - **Performance Check**: ${{ needs.performance-check.result }}
          
          ### 🚨 Action Required:
          Please investigate the failed checks and take appropriate action.
          
          ### 📊 Workflow Details:
          - [Health Check Logs](${{ needs.health-check.outputs.logs }})
          - [Performance Check Logs](${{ needs.performance-check.outputs.logs }})
          
          Immediate attention required! ⚠️`
          });
